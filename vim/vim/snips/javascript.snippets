# Function
snippet fun "function"
function ${1:function_name}(${2}) {
    ${0:${VISUAL}}
}
endsnippet

snippet fun "async function"
async function ${1:function_name}(${2}) {
    ${0:${VISUAL}}
}
endsnippet

snippet fun "generator function"
function* ${1:function_name}(${2}) {
    ${0:${VISUAL}}
}
endsnippet

snippet c=> "const arrow function"
const ${1:function_name} = (${2}) => {
    ${0:${VISUAL}}
}
endsnippet

snippet => "arrow function"
(${1}) => {
    ${0:${VISUAL}}
}
endsnippet

# Flow control
# if
snippet if "if (condition) { ... }"
if (${1:true}) {
	${0:${VISUAL}}
}
endsnippet

# if ... else
snippet ife "if (condition) { ... } else { ... }"
if (${1:true}) {
    ${0:${VISUAL}}
} else {
    ${2}
}
endsnippet

# tertiary conditional
snippet ter
${1:/* condition */} ? ${2:/* if true */} : ${0:/* if false */}
endsnippet

# switch
snippet switch
switch (${1:expression}) {
    case '${3:case}':
	${4}
	break;
    ${0}
    default:
	${2}
}
endsnippet

snippet case "case 'xyz': ... break"
case '${1:case}':
	${0:${VISUAL}}
	break;
endsnippet

snippet try "try { ... } catch(e) { ... }"
try {
    ${0:${VISUAL}}
} catch (${1:e}) {
    ${2:/* handle error */}
}
endsnippet

snippet for "for (...) {...}"
for (let ${1:i} = 0, ${2:len} = ${3:Things.length}; $1 < $2; $1++) {
    ${0:${VISUAL}}
}
endsnippet

snippet forin "for (...) {...}"
for (let ${1:i} in $2) {
    ${0:${VISUAL}}
}
endsnippet

snippet forof "for (...) {...}"
for (let ${1:i} of $2) {
    ${0:${VISUAL}}
}
endsnippet

# Objects
snippet has "hasOwnProperty" w
hasOwnProperty(${0})
endsnippet

# JSON.parse
snippet jsonp
    JSON.parse(${0:jstr});
endsnippet

# JSON.stringify
snippet jsons
    JSON.stringify(${0:object});
endsnippet

# Debugging

snippet cl "console.log"
console.log(${0});
endsnippet

snippet ce "console.error"
console.error(${0});
endsnippet

snippet cgroup "console.group"
console.group("${1:label}");
${0:${VISUAL}}
console.groupEnd();
endsnippet

# React
snippet ir
import React from 'react';
endsnippet

snippet irh
import React, { useState, useEffect} from 'react';
endsnippet

snippet ird
import ReactDom from 'react-dom';
endsnippet

snippet pt
const ${1}.propTypes = {
    ${2}: React.PropTypes.${3:type},
}
endsnippet

snippet con
connect(${1:mapStateToProps}, ${2:mapDispatchToProps})(<${3:VISUAL}/>);
endsnippet

snippet rdc
const ${1:reducerName} = (state={}, action) => {
    switch(action.type) {
	case ${1:action}:
	    $2
	    break;
	default:
	    break;
    };
};
endsnippet

snippet mstp
const mapStateToProps = (state) => {
    return {
	${1:propName}: state.$1,
    };
};
endsnippet

snippet mdtp
const mapDispatchToProps = {
    ${1:propName}: ${2:actionName}(),
};
endsnippet
